---
# Download and compile FFmpeg

- name: Install packages for building ffmpeg [CentOS/RedHat]
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - autoconf
    - automake
    - bzip2
    - bzip2-devel
    - cmake
    - fontconfig-devel
    - freetype-devel
    - fribidi-devel
    - gcc
    - gcc-c++
    - git
    - libtool
    - make
    - mercurial
    - pkgconfig
    - zlib-devel
  when: ansible_distribution in ("CentOS", "RedHat")

- name: Install packages for building ffmpeg [Debian/Ubuntu]
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - autoconf
    - automake
    - build-essential
    - cmake
    - git-core
    - libbz2-dev
    - libfontconfig1-dev
    - libfreetype6-dev
    - libfribidi-dev
    - libsdl2-dev
    - libtool
    - libva-dev
    - libvdpau-dev
    - libxcb-shm0-dev
    - libxcb-xfixes0-dev
    - libxcb1-dev
    - pkg-config
    - texinfo
    - wget
    - zlib1g-dev
  when: ansible_os_family == "Debian"

- name: Assign facts for the ffmpeg source, build, and binaries directories
  set_fact:
    ffmpeg_source_dir: "{{ ffmpeg_compile_dir }}/source"
    ffmpeg_build_dir: "{{ ffmpeg_compile_dir }}/build"
    ffmpeg_bin_dir: "{{ ffmpeg_compile_dir }}/bin"
    ffmpeg_cmake_dir: "{{ ffmpeg_compile_dir }}/cmake"

- name: Make ffmpeg source directory
  file:
    path: "{{ ffmpeg_source_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Make ffmpeg build directory
  file:
    path: "{{ ffmpeg_build_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Make ffmpeg binaries directory
  file:
    path: "{{ ffmpeg_bin_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Make ffmpeg cmake directory
  file:
    path: "{{ ffmpeg_cmake_dir }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

# cmake

- name: Download cmake binary
  get_url:
    url: "https://github.com/Kitware/CMake/releases/download/v{{ cmake_version }}/cmake-{{ cmake_version }}-Linux-x86_64.tar.gz"
    dest: "{{ ffmpeg_cmake_dir }}/cmake-{{ cmake_version }}-Linux-x86_64.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ cmake_checksum }}"

- name: Unarchive cmake binary
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_cmake_dir }}/cmake-{{ cmake_version }}-Linux-x86_64.tar.gz"
    dest: "{{ ffmpeg_cmake_dir }}"
    owner: root
    group: root
    creates: "{{ ffmpeg_cmake_dir }}/cmake-{{ cmake_version }}-Linux-x86_64"

# NASM

- name: Download NASM source
  get_url:
    url: "https://www.nasm.us/pub/nasm/releasebuilds/{{ nasm_version }}/nasm-{{ nasm_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}.tar.bz2"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ nasm_checksum }}"

- name: Unarchive NASM source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"

- name: Modifiy autogen.sh to write a flag file if it has run
  lineinfile:
    path: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/autogen.sh"
    line: touch flag_autogen_run

- name: Run autogen.sh in NASM source directory
  command: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/autogen.sh"
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/flag_autogen_run"

- name: Run configure in NASM source directory
  command: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }}"
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/config.status"

- name: Run make in NASM source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}/libnasm.a"
  register: nasm_make

- name: Run make install in NASM source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/nasm-{{ nasm_version }}"
  when: nasm_make.changed

# Yasm

- name: Download Yasm source
  get_url:
    url: "https://www.tortall.net/projects/yasm/releases/yasm-{{ yasm_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ yasm_checksum }}"

- name: Unarchive Yasm source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"

- name: Run configure in Yasm source directory
  command: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}/configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }}"
  args:
    chdir: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}/config.status"

- name: Run make in Yasm source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"
    creates: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}/libyasm.a"
  register: yasm_make

- name: Run make install in Yasm source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/yasm-{{ yasm_version }}"
  when: yasm_make.changed

# x264

- name: Download x264 source
  get_url:
    url: "ftp://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-{{ x264_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ x264_checksum }}"

- name: Unarchive x264 source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"

- name: Run configure in x264 source directory
  command: >
    {{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}/configure
      --prefix={{ ffmpeg_build_dir }}
      --bindir={{ ffmpeg_bin_dir }}
      --enable-static --enable-pic
  args:
    chdir: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"
    creates: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
    PKG_CONFIG_PATH: "{{ ffmpeg_build_dir }}/lib/pkgconfig"

- name: Run make in x264 source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"
    creates: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}/libx264.a"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: x264_make

- name: Run make install in x264 source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/x264-snapshot-{{ x264_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: x264_make.changed

# x265

- name: Download x265 source
  get_url:
    url: "https://bitbucket.org/multicoreware/x265/downloads/x265_{{ x265_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ x265_checksum }}"

- name: Unarchive x265 source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}"

- name: Run cmake for x265
  command: >
    cmake -G 'Unix Makefiles'
      -DCMAKE_INSTALL_PREFIX='{{ ffmpeg_build_dir }}'
      -DEXECUTABLE_OUTPUT_PATH='{{ ffmpeg_bin_dir }}'
      -DENABLE_SHARED=off
      {{ ffmpeg_source_dir }}/x265_{{ x265_version }}/source
  args:
    chdir: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux"
    creates: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux/x265_config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in x265 source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux"
    creates: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux/libx265.a"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: x265_make

- name: Run make install in x265 source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/x265_{{ x265_version }}/build/linux"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: x265_make.changed

# fdk-aac

- name: Download fdk-aac source
  get_url:
    url: "https://github.com/mstorsjo/fdk-aac/archive/v{{ fdk_aac_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ fdk_aac_checksum }}"

- name: Unarchive fdk-aac source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"

- name: Run autoreconf in fdk-aac source directory
  command: autoreconf -fiv
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/configure"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run configure in fdk-aac source directory
  command: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/configure --prefix={{ ffmpeg_build_dir }} --disable-shared"
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/config.status"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in fdk-aac source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
    creates: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}/libfdk-aac.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: fdk_aac_make

- name: Run make install in fdk-aac source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/fdk-aac-{{ fdk_aac_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: fdk_aac_make.changed

# lame

- name: Download lame source
  get_url:
    url: "https://sourceforge.net/projects/lame/files/lame/{{ lame_version }}/lame-{{ lame_version }}.tar.gz/download"
    dest: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ lame_checksum }}"

- name: Unarchive lame source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}"

- name: Run configure in lame source directory
  command: >
    {{ ffmpeg_source_dir }}/lame-{{ lame_version }}/configure
      --prefix={{ ffmpeg_build_dir }}
      --bindir={{ ffmpeg_bin_dir }}
      --disable-shared
      --enable-nasm
  args:
    chdir: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}"
    creates: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in lame source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}"
    creates: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}/libmp3lame/libmp3lame.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: lame_make

- name: Run make install in lame source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/lame-{{ lame_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: lame_make.changed

# libopus

- name: Download opus source
  get_url:
    url: "https://archive.mozilla.org/pub/opus/opus-{{ opus_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ opus_checksum }}"

- name: Unarchive opus source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"

- name: Run configure in opus source directory
  command: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}/configure --prefix={{ ffmpeg_build_dir }} --disable-shared"
  args:
    chdir: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"
    creates: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in opus source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"
    creates: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}/libopus.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: opus_make

- name: Run make install in opus source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/opus-{{ opus_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: opus_make.changed

# libogg

- name: Download libogg source
  get_url:
    url: "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-{{ libogg_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ libogg_checksum }}"

- name: Unarchive libogg source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}"

- name: Run configure in libogg source directory
  command: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}/configure --prefix={{ ffmpeg_build_dir }} --disable-shared"
  args:
    chdir: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}"
    creates: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in libogg source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}"
    creates: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}/src/libogg.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: libogg_make

- name: Run make install in libogg source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/libogg-{{ libogg_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: libogg_make.changed

# libvorbis

- name: Download libvorbis source
  get_url:
    url: "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-{{ libvorbis_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ libvorbis_checksum }}"

- name: Unarchive libvorbis source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}"

- name: Run configure in libvorbis source directory
  command: >
    {{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}/configure
      --prefix={{ ffmpeg_build_dir }}
      --with-ogg={{ ffmpeg_build_dir }}
      --disable-shared
  args:
    chdir: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}"
    creates: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in libvorbis source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}"
    creates: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}/lib/libvorbis.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: libvorbis_make

- name: Run make install in libvorbis source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/libvorbis-{{ libvorbis_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: libvorbis_make.changed

# aom

- name: Download aom source
  get_url:
    url: "https://aomedia.googlesource.com/aom/+archive/{{ aom_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=

- name: Create directory for unarchived aom source
  file:
    path: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Unarchive aom source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}/README.md"

- name: Create directory for aom build
  file:
    path: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}_build"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX

- name: Run cmake for aom
  command: >
    cmake -G 'Unix Makefiles'
      -DCMAKE_INSTALL_PREFIX='{{ ffmpeg_build_dir }}'
      -DENABLE_SHARED=off
      -DENABLE_NASM=on
      {{ ffmpeg_source_dir }}/aom_{{ aom_version }}
  args:
    chdir: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}_build"
    creates: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}_build/Makefile"
  environment:
    PATH: "{{ ffmpeg_cmake_dir }}/cmake-{{ cmake_version }}-Linux-x86_64/bin:{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in aom build directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}_build"
    creates: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}_build/libaom.a"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: aom_make

- name: Run make install in aom build directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/aom_{{ aom_version }}_build"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: aom_make.changed

- name: Does a copy of libaom.a exist in lib64 directory?
  stat:
    path: "{{ ffmpeg_build_dir }}/lib64/libaom.a"
  register: stat_libaom_lib64

- name: Move libaom.a file to lib for aom
  copy:
    src: "{{ ffmpeg_build_dir }}/lib64/libaom.a"
    dest: "{{ ffmpeg_build_dir }}/lib/libaom.a"
    remote_src: yes
  when: stat_libaom_lib64.stat.exists

- name: Does a copy of aom.pc exist in lib64/pkgconfig directory?
  stat:
    path: "{{ ffmpeg_build_dir }}/lib64/pkgconfig/aom.pc"
  register: stat_aom_pkgconfig

- name: Move aom.pc file to lib/pkgconfig for aom
  copy:
    src: "{{ ffmpeg_build_dir }}/lib64/pkgconfig/aom.pc"
    dest: "{{ ffmpeg_build_dir }}/lib/pkgconfig/aom.pc"
    remote_src: yes
  when: stat_aom_pkgconfig.stat.exists

# libvpx

- name: Download libvpx source
  get_url:
    url: "https://github.com/webmproject/libvpx/archive/v{{ libvpx_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ libvpx_checksum }}"

- name: Unarchive libvpx source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}"

- name: Run configure in libvpx source directory
  command: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}/configure --prefix={{ ffmpeg_build_dir }} --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm"
  args:
    chdir: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}"
    creates: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}/config.log"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in libvpx source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}"
    creates: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}/libvpx.a"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: libvpx_make

- name: Run make install in libvpx source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/libvpx-{{ libvpx_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: libvpx_make.changed

# libass

- name: Download libass source
  get_url:
    url: "https://github.com/libass/libass/archive/{{ libass_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}.tar.gz"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ libass_checksum }}"

- name: Unarchive libass source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}.tar.gz"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    creates: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}"

- name: Run autoreconf in libass source directory
  command: autoreconf -fiv
  args:
    chdir: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}"
    creates: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}/configure"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run configure in libass source directory
  command: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}/configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }} --enable-static --disable-shared"
  args:
    chdir: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}"
    creates: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"

- name: Run make in libass source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}"
    creates: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}/libass/libass.la"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: libass_make

- name: Run make install in libass source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/libass-{{ libass_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: libass_make.changed

# FFmpeg

- name: Download ffmpeg source
  get_url:
    url: "https://ffmpeg.org/releases/ffmpeg-{{ ffmpeg_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}.tar.bz2"
    owner: root
    group: root
    mode: u=r,g=r,o=
    checksum: "{{ ffmpeg_checksum }}"

- name: Unarchive ffmpeg source
  unarchive:
    remote_src: yes
    src: "{{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}.tar.bz2"
    dest: "{{ ffmpeg_source_dir }}/"
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX
    creates: "{{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}"

- name: Run configure in ffmpeg source directory
  command: >
    {{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}/configure
      --prefix={{ ffmpeg_build_dir }}
      --pkg-config-flags="--static"
      --extra-cflags="-I{{ ffmpeg_build_dir }}/include"
      --extra-ldflags="-L{{ ffmpeg_build_dir }}/lib"
      --extra-libs="-lpthread -lm"
      --bindir="{{ ffmpeg_bin_dir }}"
      --disable-shared
      --enable-gpl
      --enable-libaom
      --enable-libass
      --enable-libfdk-aac
      --enable-libfreetype
      --enable-libmp3lame
      --enable-libopus
      --enable-libvorbis
      --enable-libvpx
      --enable-libx264
      --enable-libx265
      --enable-nonfree
  args:
    chdir: "{{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}"
    creates: "{{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}/config.h"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
    PKG_CONFIG_PATH: "{{ ffmpeg_build_dir }}/lib/pkgconfig"
  register: ffmpeg_config

- name: Run make in ffmpeg source directory
  command: make
  args:
    chdir: "{{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  register: ffmpeg_make
  when: x264_make.changed or
        x265_make.changed or
        fdk_aac_make.changed or
        lame_make.changed or
        opus_make.changed or
        libogg_make.changed or
        libvorbis_make.changed or
        aom_make.changed or
        libvpx_make.changed or
        libass_make.changed or
        ffmpeg_config.changed

- name: Run make install in ffmpeg source directory
  command: make install
  args:
    chdir: "{{ ffmpeg_source_dir }}/ffmpeg-{{ ffmpeg_version }}"
  environment:
    PATH: "{{ ffmpeg_bin_dir }}:{{ ansible_env.PATH }}"
  when: ffmpeg_make.changed

# Final install

- name: Add ffmpeg bin directory to path for all users
  template:
    src: add_ffmpeg_to_path.sh
    dest: /etc/profile.d/add_ffmpeg_to_path.sh
    force: yes
    owner: root
    group: root
    mode: u=rx,g=rx,o=r
